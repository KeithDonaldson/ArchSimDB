<metal:macro use-macro="master">
    <metal:slot fill-slot="title">
        <title>Compare Results | ArchSim DB</title>
    </metal:slot>

    <metal:slot fill-slot="head">
        <!-- DataTables CSS -->
        <link href="${request.static_url('proj:static/vendor/datatables-plugins/dataTables.bootstrap.css')}" rel="stylesheet">
        <link href="${request.static_url('proj:static/vendor/datatables-responsive/dataTables.responsive.css')}" rel="stylesheet">

        <style>
            #flot-tooltip {
                font-size: 12px;
                font-family: Verdana, Arial, sans-serif;
                position: absolute;
                display: none;
                border: 2px solid;
                padding: 2px;
                background-color: #FFF;
                opacity: 0.8;
                -moz-border-radius: 5px;
                -webkit-border-radius: 5px;
                -khtml-border-radius: 5px;
                border-radius: 5px;
            }
        </style>
    </metal:slot>

    <metal:slot fill-slot="scripts">
        <!-- DataTables JavaScript -->
        <script src="${request.static_url('proj:static/vendor/datatables/js/jquery.dataTables.min.js')}"></script>
        <script src="${request.static_url('proj:static/vendor/datatables-plugins/dataTables.bootstrap.min.js')}"></script>
        <script src="${request.static_url('proj:static/vendor/datatables-responsive/dataTables.responsive.js')}"></script>

        <!-- Chart JavaScript -->
        <script src="${request.static_url('proj:static/vendor/flot/jquery.flot.js')}"></script>
        <script src="${request.static_url('proj:static/vendor/flot/jquery.flot.categories.js')}"></script>
        <script src="${request.static_url('proj:static/vendor/flot/jquery.flot.orderBars.js')}"></script>
        <script src="${request.static_url('proj:static/vendor/html2canvas/html2canvas.js')}"></script>

        <script type="text/javascript" id="data" data="${results}">

            // Initial data parsing, done before any settings

            var data = JSON.parse($("#data").attr("data").replace(/'/g, '"'));

            var columns = "[{ \"title\": \"Workload\"}, ";

            var tableHeader = $("#tableHeader");
            for (var i = 0; i < data.configs.length; i++) {
                tableHeader.append("<th>" + data.configs[i] + "</th>");
                columns += "{ \"title\": \"" + data.configs[i] + "\" },";
            }

            columns = columns.slice(0, columns.length -1);
            columns += "]";
            columns = JSON.parse(columns);

            updateTables(data);

            function updateTables(data) {
                $('#tables').empty();
                for (var stat in data.stats) {
                    $('#tables').append($('<h4>' + data.stats[stat] + '</h4>'));
                    $('#tables').append($('<table/>', {
                        id: 'table_' + stat,
                        'class': 'table table-striped table-bordered table-hover',
                        'width': '100%'
                    }));
                    $('#tables').append($('<hr/>'));

                    $('#table_' + stat).DataTable({
                        data: data.data[data.stats[stat]],
                        columns: columns,
                        responsive: true,
                        paging: false,
                        info: false,
                        searching: false,
                        columnDefs: [
                            { "orderable": false, "targets": 0 }
                        ],
                        aaSorting: [],
                        pageLength: 25,
                        rowCallback: function (row, data, index) {
                            if (data.length === 0) {
                                return -1;
                            }

                            var newdata = Object.keys(data).map(function (key) {
                                return data[key];
                            });
                            var max = newdata[1];
                            var maxIndex = 1;
                            var equalCounter = 1;

                            for (var i = 1; i < newdata.length; i++) {
                                if (newdata[i] >= max) {
                                    if (newdata[i] === max) {
                                        equalCounter += 1;
                                    }
                                    maxIndex = i;
                                    max = newdata[i];
                                }
                            }

                            if (equalCounter != newdata.length) {
                                $(row).find('td:eq(' + maxIndex + ')').css('color', 'red');
                            }
                        }
                    });
                }
            }

            // Settings Menu

            var data_after_settings = JSON.parse(JSON.stringify(data));
            var canvas_data;

            for (var config in data.configs) {
                $('#baseline').append($('<option>', {value:config, text:data.configs[config]}));
            }

            for (var stat in data.data) {
                $('#generate_chart_stat').append($('<option>', {value:stat, text:stat}));
            }

            $('#baseline').change(function() {
                data_after_settings = JSON.parse(JSON.stringify(data));
                var selected = parseInt($('#baseline').val())+1;
                if (selected != 0) {
                    for (var key in data_after_settings.data) {
                        var workloads = data_after_settings.data[key];
                        for (var workload in workloads) {
                            var baseline = workloads[workload][selected];
                            for (var i = 1; i < workloads[workload].length; i++) {
                                if (i != selected && baseline != null && workloads[workload][i] != null) {
                                    workloads[workload][i] = parseInt(workloads[workload][i])/baseline;
                                }
                            }
                        }
                    }
                }
                updateTables(data_after_settings);
            });

            $("#download_as_csv").click(function(){
                var csv = "";
                for (var key in data_after_settings.data) {
                    csv += key + ",";
                    var headings = data_after_settings.configs.join(",");
                    csv += headings + "\n";
                    data_after_settings.data[key].forEach(function(infoArray, index){
                        dataString = infoArray.join(",");
                        csv += dataString+ "\n";
                    });
                    csv += "\n";
                }

                function downloadFile(fileName, urlData) {
                    var aLink = document.createElement('a');
                    aLink.download = fileName;
                    aLink.href = urlData;

                    var event = new MouseEvent('click');
                    aLink.dispatchEvent(event);
                }

                downloadFile('compared_data.csv', 'data:text/csv;charset=UTF-8,' + encodeURIComponent(csv));
            });

            $('#generate_chart').click(function() {
                $('#chart_modal').show();
                var stat = $('#generate_chart_stat').val();
                var type = $('#generate_chart_type').val();

                var chart_list = [];
                var workload_list = [];
                for (var workload in data.data[stat]) {
                    var workload_data = data.data[stat][workload];
                    var values = [];
                    for (var i = 1; i < workload_data.length; i++) {
                        var tuple = [data.configs[i-1], workload_data[i]];
                        values.push(tuple);
                        console.log("in");
                    }
                    workload_list.push(workload_data[0]);
                    chart_list.push(values.slice(0,2));
                    console.log(values)
                }

                var config_list = []
                var symbols = []

                for (var x = 0; x < workload_list.length; x++) {
                    if (type == "bar") {
                        var config = {
                            label: workload_list[x],
                            data: chart_list[x]
                        };
                    } else if (type == "line") {
                        var config = {
                            label: workload_list[x],
                            data: chart_list[x]
                        };
                    }
                    config_list.push(config)
                }

                console.log(config_list)

                if (type == "bar") {
                    var chart_config = {
                        series: {
                            bars: {
                                show: true,
                                barWidth: 1 / (config_list.length + 1),
                                lineWidth: 0,
                                order: 1,
                                fillColor: {
                                    colors: [{
                                        opacity: 1
                                    }, {
                                        opacity: 0.7
                                    }]
                                }
                            }
                        },
                        xaxis: {
                            mode: "categories",
                            tickLength: 0
                        },
                        grid: {hoverable: true, clickable: true}
                    }
                } else if (type == "line") {
                    var chart_config = {
                        series: {
                            lines: { show: true },
                            points: {
                                radius: 3,
                                show: true,
                                fill: true
                            },
                        },
                        xaxis: {
                            mode: "categories",
                            tickLength: 0,
                            axisLabelPadding: 100
                        },
                        grid: {hoverable: true, clickable: true}
                    }
                }

                function showTooltip(x, y, contents, z) {
                    $('<div id="flot-tooltip">' + contents + '</div>').css({
                        top: y - 30,
                        left: x - 135,
                        'border-color': z,
                    }).appendTo("#chart_modal").fadeIn(200);
                }

                $.plot("#chart", config_list, chart_config);
                $("#chart").bind("plothover", function (event, pos, item) {
                    if (item) {
                        if ((previousPoint != item.dataIndex) || (previousLabel != item.series.label)) {
                            previousPoint = item.dataIndex;
                            previousLabel = item.series.label;

                            $("#flot-tooltip").remove();

                            var x = item.datapoint[0],
                            y = item.datapoint[1];
                            z = item.series.color;

                            showTooltip(item.pageX, item.pageY,
                                "<b>" + item.series.label + "</b><br />" + y,
                                z);
                        }
                    } else {
                        $("#flot-tooltip").remove();
                        previousPoint = null;
                    }
                });

                html2canvas($('#chart'), {
                    onrendered: function (canvas) {
                        canvas_data = canvas.toDataURL();
                    }
                });
            });

            function downloadGraphImage() {
                function downloadFile(fileName, urlData) {
                    var aLink = document.createElement('a');
                    aLink.download = fileName;
                    aLink.href = urlData;

                    var event = new MouseEvent('click');
                    aLink.dispatchEvent(event);
                }

                var image = canvas_data;
                image = image.replace("image/png","image/octet-stream");

                downloadFile('generated_chart.png', 'data:image/octet-stream' + encodeURI(image));
            }
        </script>
    </metal:slot>

    <metal:slot fill-slot="body">
        <div class="row">
            <div class="col-lg-12">
                <h1 class="page-header">Compare Results</h1>
            </div>
        </div>

        <div class="row">
            <div class="col-lg-12">
                <div class="panel panel-primary">
                    <div class="panel-heading">
                        Settings
                    </div>
                    <div class="panel-body">
                        <div class="row">
                            <div class="col-lg-4">
                                <label for="baseline">Set Baseline Column</label><br>
                                <select id="baseline" class="form-control">
                                    <option value="-1">None</option>
                                </select>
                            </div>
                            <div class="col-lg-8">
                                <label for="baseline">Generate Chart</label><br>
                                <div class="row">
                                    <div class="col-sm-4">
                                        <select id="generate_chart_stat" class="form-control">
                                            <option value="-1" selected disabled>Choose Stat</option>
                                        </select>
                                    </div>
                                    <div class="col-sm-4">
                                        <select id="generate_chart_type" class="form-control">
                                            <option value="-1" selected disabled>Choose Graph Type</option>
                                            <option value="bar">Bar Chart</option>
                                            <option value="line">Line Chart</option>
                                        </select>
                                    </div>
                                    <div class="col-sm-4">
                                        <button id="generate_chart" data-toggle="modal" data-target="#chart_modal" class="btn btn-primary btn-block"><i class="fa fa-bar-chart-o" aria-hidden="true"></i> Generate Chart</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row" style="margin-top: 15px;">
                            <div class="col-lg-4">
                                <label for="baseline">Download as CSV</label><br>
                                <button id="download_as_csv" class="btn btn-primary btn-block"><i class="fa fa-download" aria-hidden="true"></i> Download as CSV</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            <div id="tables" class="col-lg-12">
            </div>
        </div>
         <div class="modal fade" id="chart_modal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                        <h4 class="modal-title" id="myModalLabel">Generated Chart</h4>
                    </div>
                    <div class="modal-body">
                         <div class="flot-chart" id="chart_container" style="overflow: visible;">
                            <div class="flot-chart-content" id="chart" style="margin-top: 50px;"></div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                        <button type="button" class="btn btn-primary" onClick="downloadGraphImage()">Download as Image</button>
                    </div>
                </div>
            </div>
        </div>
    </metal:slot>
</metal:macro>